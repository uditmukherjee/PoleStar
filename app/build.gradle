apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'

android {
  def config = rootProject.ext.configuration

  compileSdkVersion config.compileSdkVersion
  buildToolsVersion config.buildToolsVersion

  defaultConfig {
    applicationId config.package
    minSdkVersion config.minSdk
    targetSdkVersion config.targetSdk
    versionCode config.versionCode
    versionName config.versionName
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
    debug {}
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
  }
}

retrolambda {
  jdk System.getenv("JAVA8_HOME") ?: getJavaHome("1.8")
  oldJdk System.getenv("JAVA7_HOME") ?: getJavaHome("1.7")
}

dependencies {
  def supportDependencies = rootProject.ext.supportLibraryDependencies
  def testDependencies = rootProject.ext.testDependencies
  def developmentDependencies = rootProject.ext.developmentDependencies

  compile fileTree(dir: 'libs', include: ['*.jar'])
  compile developmentDependencies.butterknife
  apt developmentDependencies.butterknifeCompiler

  compile fileTree(dir: 'libs', include: ['*.jar'])
  compile project(':data')

  compile supportDependencies.appcompat_v7
  compile supportDependencies.design
  compile supportDependencies.recyclerview
  compile supportDependencies.annotations
  compile supportDependencies.cardview

  // Dagger for dependency injection
  apt developmentDependencies.daggerCompiler
  compile developmentDependencies.dagger
  provided developmentDependencies.javaxAnnotation

  compile developmentDependencies.rxAndroid

  // testing
  testCompile testDependencies.junit
}

/*
 * Making retrolambda work in any platform.
 */
String getJavaHome(String version) {
  def stdout = new ByteArrayOutputStream()
  exec {
    commandLine "/usr/libexec/java_home", "-v", version
    standardOutput = stdout;
  }
  return stdout.toString().trim()
}
